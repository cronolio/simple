#!/bin/bash

show_help(){
tabs -4
cat << 'EOF'
simple [options] package ...
options:
	-p, --pretendent    pretendent
	-r, --remove        remove package
	-d, --debug         show debug info
	-h, --help          help (this message)

simple -b file
	-b --belong        find to which installed package belong a file
EOF
}

sourcing(){
######-path-#########
if [ -d /tools ]; then
	PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin:/tools/sbin
else
	PATH=/bin:/usr/bin:/sbin:/usr/sbin
fi

#default dir variables
ETC_DIR="/etc/simple"

######-source-#######
get_var_file "$ETC_DIR/make.conf"

# where is placed buildme files
if [[ -z "$BUILDME_DIR" ]]; then
	BUILDME_DIR="/var/cache/simple/buildme"
fi

# where is placed downloaded files
if [[ -z "$DISTDIR" ]]; then
	DISTDIR="/var/cache/simple/distfiles"
fi

# place for upacked files to build (HOME for simple user) (like ${SIMPLEBUILD_DIR}/${CATEGORY}/${PACKAGE} )
SIMPLEBUILD_DIR="/var/tmp/simple"

# be sure bashrc deleted from previous run
if [ -f $SIMPLEBUILD_DIR/bashrc ]; then
	rm -f $SIMPLEBUILD_DIR/bashrc
fi

add_variable PATH ETC_DIR BUILDME_DIR DISTDIR SIMPLEBUILD_DIR
add_variable CFLAGS CXXFLAGS CPPFLAGS LDFLAGS MAKEFLAGS STABILITY LINGUAS USE
}

find_package_from_file(){
if [[ ${#@} != 1 ]]; then
	echo "one argument required"
	return 0
else
	cd /var/lib/pkg || { echo -e "\e[31m  * cd failed\e[0m" && return 1; }
	rez=$(grep -r -F "/$@ ")
	if [ -z "$rez" ]; then
		echo "no package found"
		return 0
	fi
	echo "$rez"
fi
}

run_search(){
BASH_ENV="$SIMPLEBUILD_DIR/bashrc" su simple -s /bin/bash /usr/lib/simple/search -- $@
}

run_show_pretendent(){
BASH_ENV="$SIMPLEBUILD_DIR/bashrc" su simple -s /bin/bash /usr/lib/simple/pretendent
}

run_remove(){
/usr/lib/simple/remove
}

run_fetch(){
BASH_ENV="$SIMPLEBUILD_DIR/bashrc" su simple -s /bin/bash /usr/lib/simple/fetch
}

run_all_build(){
source $SIMPLEBUILD_DIR/bashrc
for CPV in ${USERLIST_TO_INSTALL[@]}; do
	installed=no
	for IPV in ${INSTALLED_LIST}; do
		if [ "$CPV" = "$IPV" ]; then
			installed=yes
		fi
	done

	if [ "$installed" = "yes" ]; then
		echo -e "\e[96m$CPV package already installed. Continue...\e[0m"
		continue
	fi


	BASH_ENV="$SIMPLEBUILD_DIR/bashrc" su simple -s /bin/bash /usr/lib/simple/all_build -- $CPV -setup_env

	# Checking if previous source is present and delete
	# DANGEROUS operation. Check if prefix of path is /var/tmp/simple to allow this
#	broot=$(grep BROOT $SIMPLEBUILD_DIR/bashrc | sed -nr 's/BROOT="([^"]*?)(")/\1/p')

	unset broot
	broot_regex='BROOT="([-\.~_a-zA-Z0-9${}/]+)"'
	while read -r line; do
		if [[ "$line" =~ $broot_regex* ]]; then
			broot=${BASH_REMATCH[1]}
		fi
	done <"$SIMPLEBUILD_DIR/bashrc"

	if [ -z "$broot" ]; then
		echo "broot_regex failed"
		return 1
	fi

	if [ -d "$broot" ]; then
		path_regex="($SIMPLEBUILD_DIR)(/)([-a-zA-Z]+)(/)([-_a-zA-Z0-9.]+)"
		debug_message "broot is: $broot"

		if [[ "$broot" =~ $path_regex ]]; then
			if [ "${BASH_REMATCH[1]}" != "$SIMPLEBUILD_DIR" ]; then
				echo "Checking for safe prefix in '$BROOT' failed. Should be $SIMPLEBUILD_DIR"
				return 1
			fi

			echo -e "\e[96mDelete previous Source\e[0m"
			rm -rf -- "$broot"

			category="${BASH_REMATCH[3]}"
			# remove direcory if empty
			rmdir -- "$SIMPLEBUILD_DIR/$category" 2> /dev/null
		else
			echo 'path_regex for $BROOT failed'
			return 1
		fi
	fi

	# remove line from bashrc with BROOT
	sed -i '/BROOT/d' "$SIMPLEBUILD_DIR/bashrc"

	unset broot path_regex category

	BASH_ENV="$SIMPLEBUILD_DIR/bashrc" su simple -s /bin/bash /usr/lib/simple/all_build -- $CPV -all_build || { echo -e "\e[31m  * run_build failed\e[0m" && return 1; }

	/usr/lib/simple/install $CPV || { echo -e "\e[31m  * install failed\e[0m" && return 1; }
	/usr/lib/simple/merge $CPV || { echo -e "\e[31m  * merge failed\e[0m" && return 1; }
done
}


##### body ######
#zapuskator
source /usr/lib/simple/libsimple
sourcing || { echo -e "\e[31m  * sourcing failed\e[0m" && exit 1; }

if [ $# -gt 0 ]; then
	regex_option="(^-).*?"
	for i in "$@"; do
		if [[ "$i" =~ $regex_option ]]; then
			if [[ "$i" != '--' ]]; then
				good=false
				if [[ "$i" = '-p' || "$i" = '--pretendent' ]]; then
					good=true
					PRETENDENT=true
					add_variable PRETENDENT
					option="$i $option"
				fi
				if [[ "$i" = '-d' || "$i" = '--debug' ]]; then
					good=true
					DEBUG=true
					add_variable DEBUG
					option="$i $option"
				fi
				if [[ "$i" = '-r' || "$i" = '--remove' ]]; then
					good=true
					REMOVE=true
					add_variable REMOVE
					option="$i $option"
				fi
				if [[ "$i" = '-h' || "$i" = '--help' ]]; then
					good=true
					option="$i $option"
					show_help
					exit 0
				fi
				if [[ "$i" = '-b' || "$i" = '--belong' ]]; then
					good=true
					option="$i $option"
					BELONG=true
					add_variable BELONG
				fi

				#bad options
				if [[ "$good" = false ]]; then
					if [[ "$i" =~ $regex_option ]]; then
						echo "unknown option $i"
						bad_option="$i $bad_option"
					fi
				fi
			else
				break
			fi
		fi
	done

	all_option="$option $bad_option"
	unset i good regex_option option bad_option

#removing all options and after -- don't check if option
	for a in "$@"; do
		isoption=false

		if [[ "$a" != '--' ]]; then
			if [[ "$end_option" != true ]]; then
				for all in $all_option; do
					if [[ "$a" = "$all" ]]; then
						isoption=true
					fi
				done

				if [[ "$isoption" = false ]]; then
					argx="$argx $a"
				fi
			else
				argx="$argx $a"
			fi
		else
			# case -- options is end
			end_option=true
		fi
	done

	unset a all isoption end_option

# expand @ (toolchain, system, world)
	for a in $argx; do
		isset=false
		if [[ "$a" = '@system' || "$a" = '@toolchain' ]]; then
			myset=$(grep '^[^#]' "$BUILDME_DIR"/profiles/${a:1} | tr -s [:space:] ' ')
			isset=true
		fi
		if [[ "$isset" = false ]]; then
			argy="$argy $a"
		fi
	done

	arg="$myset $argy"
	arg=$(echo -e $arg) #eat spaces

	unset a myset argy argx isset
	echo "all arg: $arg"

	if [ -z "$arg" ]; then
		echo -e "\e[31mat least one argument required\e[0m"
		exit 1
	fi

	# print variables to bashrc file
	print_variable > $SIMPLEBUILD_DIR/bashrc
	chown simple:simple $SIMPLEBUILD_DIR/bashrc

	if [ -v BELONG ]; then
		find_package_from_file $arg || { echo -e "\e[31m  * find_package_from_file failed\e[0m" && exit 1; }
		exit 0
	fi

	run_search $arg || { echo -e "\e[31m  * run_search failed\e[0m" && exit 1; }

	if [ -v PRETENDENT ]; then
		run_show_pretendent || { echo -e "\e[31m  * run_show_pretendent failed\e[0m" && exit 1; }
		exit 0
	fi
	if [ -v REMOVE ]; then
		run_remove || { echo -e "\e[31m  * run_remove failed\e[0m" && exit 1; }
		exit 0
	fi

	run_fetch || { echo -e "\e[31m  * run_fetch failed\e[0m" && exit 1; }
	run_all_build || { echo -e "\e[31m  * run_all_build failed\e[0m" && exit 1; }
else
	show_help
	exit 0
fi
