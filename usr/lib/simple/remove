#!/bin/bash

setup_env(){
source /usr/lib/simple/libsimple
source /var/tmp/simple/bashrc
cd $SIMPLEBUILD_DIR
}

remove_files(){

echo -n -e "\e[96mRemoving $CATEGORY/$PACKAGE-$VERSION$raw_patch  \e[0m"

if [ -f /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch"/CONTENT ]; then
	content_file_regex=$'(otr|elf_32|elf_64) (/.+) ([0-9a-f]+)(.*)'
	content_dir_regex=$'(dir) (/.+)'
	content_sym_regex=$'(sym) (/.+) -> (.+)'
	content_type_regex=$'(dir|otr|elf_32|elf_64|sym) .*'
	while read -r line; do
		debug_message "line from content $line"
		if [[ "$line" =~ $content_type_regex ]]; then
			if [ "${BASH_REMATCH[1]}" = 'dir' ]; then
				if [[ "$line" =~ $content_dir_regex ]]; then
					debug_message "dir to remove ${BASH_REMATCH[2]}"
					package_dirs="${BASH_REMATCH[2]} $package_dirs"
					continue
				else
					echo "content dir regex failed"
					return 1
				fi
			fi
			if [ "${BASH_REMATCH[1]}" = 'sym' ]; then
				if [[ "$line" =~ $content_sym_regex ]]; then
					debug_message "sym to remove ${BASH_REMATCH[2]}"
					rm -f -- "${BASH_REMATCH[2]}"
					continue
				else
					echo "content sym regex failed"
					return 1
				fi
			fi
		fi
		if [[ "$line" =~ $content_file_regex ]]; then
			debug_message "file to remove is ${BASH_REMATCH[2]}"
			rm -f -- "${BASH_REMATCH[2]}"
		else
			echo "content regex failed"
			return 1
		fi
	done </var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch"/CONTENT

	unset content_file_regex content_dir_regex content_sym_regex content_type_regex

	fhs_dirs=$(grep '^[^#]' /usr/lib/simple/fhs_dirs)

	for package_dir in $package_dirs; do
		#echo package_dir $package_dir

		if (shopt -s nullglob dotglob; f=("$package_dir"/*); ((! ${#f[@]}))); then
			matched_fhs=false
			for fhs_dir in $fhs_dirs; do
				if [ "$fhs_dir" = "$package_dir" ]; then
					#echo "matched for fhs"
					matched_fhs=true
				fi
			done

			if [ "$matched_fhs" = false ]; then
				#echo "no any match for fhs"
				rmdir -- "$package_dir" 2> /dev/null
			fi
		fi
	done

	rm -rf -- /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch"
	rmdir --  /var/lib/pkg/"$CATEGORY" 2> /dev/null

	echo "Ok"

else
	echo "CONTENT file for $CPV is not exist"
	return 1
fi

}

run_post_remove(){
BUILDME_FILE=$BUILDME_DIR/$CATEGORY/$PACKAGE/$PACKAGE-$VERSION$raw_patch.buildme
source $BUILDME_FILE
if type simple_post_remove > /dev/null 2>&1 ; then
	echo -e "\e[96mRuning simple_post_remove\e[0m"
	simple_post_remove || { echo -e "\e[31m  * post_remove failed\e[0m" && return 1; }
	echo -e "\e[96mOk\e[0m"
fi
}

run_remove_files(){
for CPV in $REMOVE_LIST; do
#	echo "CPV: $CPV"
	get_variables $CPV

	remove_files || { echo -e "\e[31m  * remove_files failed\e[0m" && return 1; }
	run_post_remove || { echo -e "\e[31m  * run_post_remove failed\e[0m" && return 1; }
done
}

setup_env || exit 1
run_remove_files || exit 1

