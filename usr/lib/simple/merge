#!/bin/bash

run_merge(){

echo -e "\e[96mRunning merge  \e[0m"
cd "$D" || return 1

# check if software alredy installed
if [ -d /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION" ]; then
	echo "/var/lib/$CATEGORY/$PACKAGE-$VERSION already exist"
	return 1
fi

# check type of file and if alredy exist on real system (only for files and symlinks)
shopt -s globstar nullglob

for line in ** ; do
	if [ "$line" = "." ]; then
		continue
	elif [ -d "$line" ]; then
		echo "dir /$line"
		continue
	elif [ -L "$line" ]; then
		if [ -L /"$line" ]; then
			exist+=("$line")
		fi
		echo "sym /$line -> $(readlink $line)"
		continue
	fi

	#http://sco.com/developers/gabi/latest/ch4.eheader.html
	# not sure about  \0\0..
	read -rN 17 byte <"$line"
	if [[ "$byte" =~ $'\x7f'(ELF)($'\x01'|$'\x02')($'\x01'|$'\x02')($'\x01'|$'\x02')$'\x00'$'\x00'($'\x01'|$'\x02'|$'\x03') ]]; then
		if [[ "${BASH_REMATCH[5]}" = $'\x02' || "${BASH_REMATCH[5]}" = $'\x03' ]]; then
			if [ "${BASH_REMATCH[2]}" = $'\x02' ]; then
				abi="64"
			elif [ "${BASH_REMATCH[2]}" = $'\x01' ]; then
				abi="32"
			fi

			while read -r ldd_line; do
				ldd_lib=$(echo "$ldd_line" | cut -d ' ' -f1)
				if [ "$ldd_lib" != linux-vdso.so.1 ]; then
					ldd_result+=($ldd_lib)
				fi
			done < <(ldd "$line")

			echo "elf_$abi /$line $(md5sum $line | cut -d ' ' -f1) ${ldd_result[@]}"
			unset ldd_result byte abi
			continue
		fi
	fi
	echo "otr /$line $(md5sum $line | cut -d ' ' -f1)"
	
	if [ -e /"$line" ]; then
		exist+=("$line")
	fi

done > "$BROOT"/CONTENT
shopt -u globstar nullglob

# if some files alredy exists, then warn and exit
if [[ "${#exist[@]}" != 0 ]]; then
	echo -e "\e[31mSome files already exist. below the list\e[0m"
	echo "${exist[@]}"
	return 1
fi

# copy content list
if [ ! -d /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION" ]; then
	mkdir -p /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION" || return 1
	cp "$BROOT"/CONTENT /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION"/
else
	echo content not copyed
	return 1
fi

# copy all files to real system
cp -r --preserve=all * / || return 1

# remove work direcory and category if empty
rm -rf -- "$BROOT"
rmdir -- /var/tmp/simple/"$CATEGORY" 2> /dev/null
rm -- "$SIMPLEBUILD_DIR"/bashrc

echo "Ok"
}

setup_env(){
CPV=$1
source /usr/lib/simple/libsimple
source /var/tmp/simple/bashrc
cd $SIMPLEBUILD_DIR
get_variables $CPV

BROOT="$SIMPLEBUILD_DIR/$CATEGORY/$PACKAGE-$VERSION"
S="$BROOT/srcdir"
B="$BROOT/builddir/$PACKAGE-$VERSION"
D="$BROOT/installed"

export CATEGORY PACKAGE VERSION BROOT S B D


cd "$B"
source "$BROOT/varlog/variables"
source "$BUILDME_FILE"
}

setup_env $1 || exit 1
run_merge || exit 1
