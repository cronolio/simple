#!/bin/bash

get_content(){
# check type of file and if alredy exist on real system (only for files and symlinks)
shopt -s globstar nullglob

for line in ** ; do
	if [ "$line" = "." ]; then
		continue
	elif [ -d "$line" ]; then
		echo "dir /$line"
		continue
	elif [ -L "$line" ]; then
		if [ -e /"$line" ]; then
			exist+=("$line")
		fi
		echo "sym /$line -> $(readlink $line)"
		continue
	fi

	#http://sco.com/developers/gabi/latest/ch4.eheader.html
	# not sure about  \0\0..
	read -rN 17 byte <"$line"
	if [[ "$byte" =~ $'\x7f'(ELF)($'\x01'|$'\x02')($'\x01'|$'\x02')($'\x01'|$'\x02')$'\x00'$'\x00'($'\x01'|$'\x02'|$'\x03') ]]; then
		if [[ "${BASH_REMATCH[5]}" = $'\x02' || "${BASH_REMATCH[5]}" = $'\x03' ]]; then
			if [ "${BASH_REMATCH[2]}" = $'\x02' ]; then
				abi="64"
			elif [ "${BASH_REMATCH[2]}" = $'\x01' ]; then
				abi="32"
			fi

			regex_ldd="([^ ]+?)"
			while read -r ldd_line; do
				if [[ "$ldd_line" =~ $regex_ldd ]]; then
					if [[ "${BASH_REMATCH[1]}" = 'statically' || "${BASH_REMATCH[1]}" = 'not' ]]; then
						ldd_result+=(static)
					elif [ "${BASH_REMATCH[1]}" != linux-vdso.so.1 ]; then
						ldd_result+=(${BASH_REMATCH[1]})
					fi
				fi
			done < <(if [[ "$PACKAGE" = glibc && ! -f /lib64/ld-linux-x86-64.so.2 ]]; then
						#case while no glibc. it will use fresh compiled ld
						lib/ld-linux-x86-64.so.2 --list "$line" 2> /dev/null | sed -r -e 's#/tools##' -e 's#/lib/#/lib64/#'
					else
						ldd "$line" 2> /dev/null
					fi)

			echo "elf_$abi /$line $(md5sum $line | cut -d ' ' -f1) ${ldd_result[@]}"
			unset ldd_result byte abi regex_ldd
			
			# hack for bash installation
			if [ "$line" = 'bin/bash' ]; then
				if [ -e /"$line" ]; then
					rm -f /bin/bash
				fi
			fi
			continue
		fi
	fi

	#we will create this file later on real system (with all other files)
	if [ "$line" = "usr/share/info/dir" ]; then
		# set some variable to trigerly run comand in post install
		continue
	fi

	#perl internal documentation
	#this file used by multiple perl software
	#usr/lib/perl5/5.26.3/x86_64-linux-thread-multi/perllocal.pod
	if [[ "$line" = *"perllocal.pod" ]]; then
		# set some variable to trigerly run comand in post install
		continue
	fi

	if [ -e /"$line" ]; then
		exist+=("$line")
	fi

	echo "otr /$line $(md5sum $line | cut -d ' ' -f1)"

done > "$BROOT"/CONTENT
shopt -u globstar nullglob
}

otk_checks(){
# if some files alredy exists, then warn and exit
if [[ "${#exist[@]}" != 0 ]]; then
	echo -e "\e[31mSome files already exist. below the list\e[0m"
	echo "${exist[@]}"
	return 1
fi

# remove uneeded files
if [ -f ${D}/usr/share/info/dir ]; then
	rm ${D}/usr/share/info/dir
	echo "write a trigger to readd all info files on real system"
	echo 'like "pushd /usr/share/info; rm -v dir; for f in *; do; install-info $f dir 2>/dev/null; done; popd"'
fi

# add magic for not depend on version
if [ -f ${D}/usr/lib/perl5/5.26.3/x86_64-linux-thread-multi/perllocal.pod ]; then
	echo "perllocal.pod hack"
	echo >> /usr/lib/perl5/5.26.3/x86_64-linux-thread-multi/perllocal.pod
	cat ${D}/usr/lib/perl5/5.26.3/x86_64-linux-thread-multi/perllocal.pod >> /usr/lib/perl5/5.26.3/x86_64-linux-thread-multi/perllocal.pod
	rm ${D}/usr/lib/perl5/5.26.3/x86_64-linux-thread-multi/perllocal.pod
fi
}

run_merge(){
# copy content list
if [ ! -d /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch" ]; then
	mkdir -p /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch" || return 1
	cp "$BROOT"/CONTENT /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch"/
else
	echo content not copyed
	return 1
fi

# copy all files to real system
cp -r --preserve=all * / || return 1

# special behaviour installing
if [[ "$PACKAGE" = glibc ]]; then
	get_content
	cp -f "$BROOT"/CONTENT /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch"/
fi

# remove work direcory and category if empty
rm -rf -- "$BROOT"
rmdir -- /var/tmp/simple/"$CATEGORY" 2> /dev/null
#rm -- "$SIMPLEBUILD_DIR"/bashrc

echo "Ok"
}

setup_env(){
CPV=$1
source /usr/lib/simple/libsimple
source /var/tmp/simple/bashrc
cd $SIMPLEBUILD_DIR
get_variables $CPV

BROOT="$SIMPLEBUILD_DIR/$CATEGORY/$PACKAGE-$VERSION$raw_patch"
S="$BROOT/srcdir"
B="$BROOT/builddir/$PACKAGE-$VERSION$raw_patch"
D="$BROOT/installed"

export CATEGORY PACKAGE VERSION BROOT S B D

source "$BROOT/varlog/variables"
source "$BUILDME_FILE"

echo -e "\e[96mRunning merge  \e[0m"
cd "$D" || return 1

# check if software alredy installed
if [ -d /var/lib/pkg/"$CATEGORY"/"$PACKAGE"-"$VERSION$raw_patch" ]; then
    echo "/var/lib/$CATEGORY/$PACKAGE-$VERSION$raw_patch already exist"
    return 1
fi
}

setup_env $1 || exit 1
get_content || { echo -e "\e[31m  * get_content failed\e[0m" && exit 1; }
otk_checks || { echo -e "\e[31m  * otk_checks failed\e[0m" && exit 1; }
run_merge || { echo -e "\e[31m  * run_merge failed\e[0m" && exit 1; }
