#!/bin/bash

#cleanup_env(){
#clean up environment
#REQENV="REQENV HOME USER TERM LS_COLORS PS1 PATH"
#
#for C in $(printenv | cut -d '=' -f 1); do
#   echo $C
#    echo $REQENV | grep $C > /dev/null 2>&1 || unset $C > /dev/null 2>&1
#done

#( set -o posix ; set )
#}

setup_env(){
CPV=$1
cd $SIMPLEBUILD_DIR
source /usr/lib/simple/libsimple
get_variables $CPV

BROOT="$SIMPLEBUILD_DIR/$CATEGORY/$PACKAGE-$VERSION"
S="$BROOT/srcdir"
B="$BROOT/builddir/$PACKAGE-$VERSION"
D="$BROOT/installed"

export CATEGORY PACKAGE VERSION BROOT S B D MAKEFLAGS CFLAGS CXXFLAGS LDFLAGS

# to check if previous source unpacked and delete
if [ -f "$SIMPLEBUILD_DIR/bashrc" ]; then
    echo "BROOT=\"$BROOT\"" >> "$SIMPLEBUILD_DIR/bashrc"
else
    echo "$SIMPLEBUILD_DIR/bashrc file does not exist"
    return 1
fi
}

all_build(){
CPV=$1
cd $SIMPLEBUILD_DIR
source /usr/lib/simple/libsimple
get_variables $CPV

BROOT="$SIMPLEBUILD_DIR/$CATEGORY/$PACKAGE-$VERSION"
S="$BROOT/srcdir"
B="$BROOT/builddir/$PACKAGE-$VERSION"
D="$BROOT/installed"

export CATEGORY PACKAGE VERSION BROOT S B D MAKEFLAGS CFLAGS CXXFLAGS LDFLAGS

/usr/lib/simple/unpack $1 || return 1
#/usr/lib/simple/patch $1
/usr/lib/simple/setup || return 1
/usr/lib/simple/compile || return 1
}

# all_build $CPV '-arg' || all_build '-arg' $CPV

if [ $# = 2 ]; then
	regex_option="(^-).*?"
	for i in "$@"; do
		if [[ "$i" =~ $regex_option ]]; then
			if [[ "$i" != '--' ]]; then
				good=false
				if [[ "$i" = "-setup_env" ]]; then
					need_to_run=setup_env
					good=true
					option="$i $option"
				fi
				if [[ "$i" = "-all_build" ]]; then
					need_to_run=all_build
					good=true
					option="$i $option"
				fi

				#bad options
				if [[ "$good" = false ]]; then
					if [[ "$i" =~ $regex_option ]]; then
						echo "unknown option $i"
						bad_option="$i $bad_option"
					fi
				fi
			else
				break
			fi
		fi
	done

	#removing bad options
	for k in "$@"; do
		count_bad=0
		for b in $bad_option; do
			if [[ "$k" = "$b" ]]; then
				count_bad=$((count_bad + 1))
			fi
		done
		if [[ $count_bad = 0 ]]; then
			known="$k $known"
		fi
	done

	for k in $known; do
		count_arg=0
		for l in $option; do
			if [[ "$k" = "$l" ]]; then
				count_arg=$((count_arg + 1))
			fi
		done

		if [[ $count_arg = 0 ]]; then
			arg="$k $arg"
		fi
	done

	unset a b i k l bad_option good count_arg count_bad known option regex_option

	$need_to_run $arg || exit 1

else
	echo 'should be $CPV and -setup_env or -all_build'
	exit 1
fi
